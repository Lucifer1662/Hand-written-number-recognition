{"version":3,"sources":["NeuralNet.tsx","NetworkGraph.tsx","App.tsx","useWindowSize.tsx","serviceWorker.ts","index.tsx"],"names":["stackSelfN","x","n","axis","stacks","i","push","tf","outterProduct","a","b","aStack","shape","bStack","NeuralNet","layerSizes","w","this","length","s","sigmoid","sub","input","clone","add","zs","az","z","output","learning_rate","getValues","dws","dbs","res","error","d_sigmoid","dw","reverse","mean","mul","results","getValue","oneHotHighestValue","equal","sum","div","Promise","all","map","Object","data","values","JSON","toData","stringify","name","fs","toJson","writeFileSync","console","log","json","readFileSync","toString","loadFromJson","fromObject","parse","NetworkGraph","nn","connectionThreshold","activationThreshold","ref","useRef","height","current","offsetHeight","width","offsetWidth","useState","dummy","setDummy","setTimeout","aBuffers","bufferSync","smallNN","slice","bs","ws","nodes","paddedHeight","padding","paddedWidth","fontSize","aIndex","y","id","labelProperty","color","interpolateRgb","get","forEach","links","offset","newOffset","index","buffer","source","target","nodeLabelOffset","myConfig","staticGraph","automaticRearrangeAfterDropNode","nodeHighlightBehavior","node","size","highlightStrokeColor","fontColor","Math","floor","link","highlightColor","style","position","config","ai","require","NeuralNetwork","App","saveableCanvasRef","number","setNumber","setInput","screenSize","undefined","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","landscape","dimension","min","predicatNumber","context","canvas","drawing","getContext","imgd","getImageData","pix","skipW","skipH","xs","flatten","resBuffer","className","display","margin","verticalAlign","key","canvasWidth","canvasHeight","brushColor","brushRadius","lazyRadius","onChange","Button","variant","onClick","clear","flex","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2da9700f.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\nimport { Tensor, sigmoid } from '@tensorflow/tfjs';\r\nimport fs from 'fs'\r\n\r\n\r\n\r\nfunction stackSelfN(x: Tensor, n: number, axis: number = 0) {\r\n    var stacks: Array<Tensor> = []\r\n    //@ts-ignore\r\n    for (var i = 0; i < n; i++) {\r\n        stacks.push(x);\r\n    }\r\n    return tf.stack(stacks, axis);\r\n}\r\n\r\nfunction outterProduct(a: Tensor, b: Tensor) {\r\n\r\n    var aStack = stackSelfN(a, b.shape[0]);\r\n\r\n    var bStack = stackSelfN(b, a.shape[0], 1);\r\n\r\n\r\n    return tf.mul(aStack, bStack);\r\n}\r\n\r\nexport default class NeuralNet {\r\n\r\n    w: Array<Tensor>;\r\n    b: Array<Tensor>;\r\n\r\n    constructor(layerSizes: Array<number>) {\r\n\r\n        this.w = []\r\n        this.b = []\r\n        for (var i = 0; i < layerSizes.length - 1; i++) {\r\n            this.w.push(tf.randomUniform([layerSizes[i + 1], layerSizes[i]], -1, 1))\r\n            this.b.push(tf.randomUniform([layerSizes[i + 1]], -1, 1))\r\n        }\r\n    }\r\n\r\n    d_sigmoid(x: Tensor) {\r\n        var s = sigmoid(x)\r\n        return tf.mul(s, tf.scalar(1).sub(s));\r\n    }\r\n\r\n    getValue(input: Tensor) {\r\n        input = input.clone()\r\n        var w = this.w\r\n        var b = this.b\r\n        for (var i = 0; i < w.length; i++) {\r\n            input = tf.dot(w[i], input)\r\n            input = tf.transpose(input)\r\n            input = input.add(b[i])\r\n            input = tf.transpose(input)\r\n            input = tf.sigmoid(input)\r\n        }\r\n\r\n        return input\r\n    }\r\n\r\n    getValues(input: Tensor) {\r\n        var w = this.w\r\n        var b = this.b\r\n        var zs = [input]\r\n        var az = [input]\r\n        for (var i = 0; i < w.length; i++) {\r\n            var z = tf.dot(w[i], az[i])\r\n            z = tf.transpose(z)\r\n            z = z.add(b[i])\r\n            z = tf.transpose(z)\r\n            var a = tf.sigmoid(z)\r\n\r\n            zs.push(z)\r\n            az.push(a)\r\n        }\r\n\r\n        return [az, zs]\r\n    }\r\n\r\n    backPropagate(input: Tensor, output: Tensor, learning_rate: number = 1) {\r\n        var w = this.w\r\n        var b = this.b\r\n        var [az, zs] = this.getValues(input)\r\n\r\n        var dws: Array<Tensor> = [];\r\n        var dbs: Array<Tensor> = [];\r\n\r\n        var res = az[az.length - 1];\r\n\r\n        var error = tf.mul(this.d_sigmoid(zs[zs.length - 1]), (tf.sub(res, output)))\r\n\r\n        dbs.push(error)\r\n\r\n        var a = az[az.length - 2]\r\n\r\n        var dw = outterProduct(a, error);\r\n\r\n\r\n\r\n        dws.push(dw)\r\n\r\n        for (let i = w.length - 2; i >= 0; i--) {\r\n            error = tf.mul(tf.dot(tf.transpose(w[i + 1]), error), this.d_sigmoid(zs[i + 1]))\r\n\r\n            dw = outterProduct(az[i], error);\r\n\r\n            dws.push(dw)\r\n            dbs.push(error)\r\n        }\r\n\r\n        dws = dws.reverse();\r\n        dbs = dbs.reverse();\r\n\r\n        if (dws[0].shape.length === 3) {\r\n            for (let i = 0; i < dws.length; i++) {\r\n                w[i] = w[i].sub(dws[i].mean(2).mul(tf.scalar(learning_rate)))\r\n            }\r\n\r\n            for (let i = 0; i < dbs.length; i++) {\r\n                b[i] = b[i].sub(dbs[i].mean(1).mul(tf.scalar(learning_rate)))\r\n            }\r\n\r\n        } else {\r\n\r\n            for (let i = 0; i < dws.length; i++) {\r\n                w[i] = w[i].sub(dws[i].mul(tf.scalar(learning_rate)))\r\n            }\r\n\r\n\r\n            for (let i = 0; i < dbs.length; i++) {\r\n                b[i] = b[i].sub(dbs[i].mul(tf.scalar(learning_rate))).mul(tf.scalar(learning_rate))\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    oneHotHighestValue(input: Tensor) {\r\n        var results = tf.transpose(this.getValue(input))\r\n        if(input.shape[1])\r\n            return tf.argMax(results, 1);\r\n        return tf.argMax(results, 0);\r\n    }\r\n\r\n    accuracyOneHotHighestValue(input: Tensor, output: Tensor) {\r\n        var results = this.oneHotHighestValue(input)\r\n        \r\n        var sames = output.equal(results).sum();\r\n        //\r\n        return sames.div(tf.scalar(output.shape[0]));\r\n    }\r\n\r\n    async toData() {\r\n        return {\r\n            w: await Promise.all(this.w.map(async w => ({ data: Object.values(await w.data()), shape: w.shape }))),\r\n            b: await Promise.all(this.b.map(async b => ({ data: Object.values(await b.data()), shape: b.shape }))),\r\n        }\r\n    }\r\n\r\n    async toJson() {\r\n        return JSON.stringify(await this.toData())\r\n    }\r\n\r\n    async saveToFileLocal(name: string = \"ai\") {\r\n        fs.writeFileSync(name+'.json', await this.toJson());\r\n    }\r\n\r\n    async loadFromFileLocal(name: string = \"ai\") {\r\n        console.log(\"loading\")\r\n        try{\r\n            var json = fs.readFileSync(name+'.json').toString();\r\n            await this.loadFromJson(json);\r\n        }catch(e){\r\n          \r\n        }\r\n        \r\n    }\r\n\r\n    loadFromJson(json: string) {\r\n        this.fromObject(JSON.parse(json))\r\n    }\r\n\r\n    fromObject({w,b}: any){\r\n        this.w = w.map((w: any) => tf.tensor(w.data, w.shape));\r\n        this.b = b.map((b: any) => tf.tensor(b.data, b.shape));\r\n    }\r\n\r\n}","import React, { useRef, useState } from 'react';\r\n//@ts-ignore\r\nimport { Graph } from \"react-d3-graph\";\r\n\r\nimport NeuralNet from './NeuralNet';\r\nimport * as tf from '@tensorflow/tfjs';\r\n//@ts-ignore\r\nimport { interpolateRgb } from 'd3-interpolate';\r\n\r\ninterface Props {\r\n    nn: NeuralNet,\r\n    input: tf.Tensor,\r\n    connectionThreshold?: number,\r\n    activationThreshold?: number\r\n}\r\n\r\nexport default function NetworkGraph({ nn, input, connectionThreshold = 1.2, activationThreshold = 0.5 }: Props) {\r\n    let ref = useRef();\r\n    //@ts-ignore\r\n    let height = (ref && ref.current) ? ref.current.offsetHeight : 800;\r\n    //@ts-ignore\r\n    let width = (ref && ref.current) ? ref.current.offsetWidth : 800;\r\n\r\n    let [dummy, setDummy] = useState(true);\r\n\r\n    if(!ref || !ref.current){\r\n        setTimeout(()=>{setDummy(!dummy)}, 500);\r\n    }\r\n\r\n    var [az] = nn.getValues(input);\r\n\r\n    var aBuffers = az.map(a => a.bufferSync())\r\n\r\n    console.log(width);\r\n\r\n\r\n\r\n    var smallNN = new NeuralNet([64, 32, 10])\r\n    smallNN.w = nn.w.slice(1);\r\n    smallNN.b = nn.b.slice(1);\r\n\r\n    let bs = smallNN.b;\r\n    let ws = smallNN.w;\r\n\r\n\r\n    let nodes: Array<any> = [];\r\n\r\n    let padding = 50;\r\n    let fontSize = 30;\r\n    let paddedHeight = height - padding * 2;\r\n    let paddedWidth = width - padding - fontSize*7;\r\n\r\n    var positiveColour = 'green';\r\n    var negativeColour = 'red';\r\n\r\n\r\n\r\n    let x = padding;\r\n    let aIndex = 1;\r\n    if (ws[0].shape[1]) {\r\n        let y = padding;\r\n        for (let i = 0; i < ws[0].shape[1]; i++) {\r\n            nodes.push({ id: nodes.length, labelProperty: \"hello\", x, y, color: interpolateRgb(negativeColour, positiveColour)(aBuffers[aIndex].get(i)) });\r\n            y += (paddedHeight / ws[0].shape[1]);\r\n        }\r\n    }\r\n\r\n\r\n    bs.forEach((b) => {\r\n        x += (paddedWidth / (bs.length+1));\r\n        aIndex++;\r\n        let y = padding;\r\n        for (let i = 0; i < b.shape[0]; i++) {\r\n            nodes.push({ id: nodes.length, x: x, y, labelProperty: () => (\"hello\"), color: interpolateRgb(negativeColour, positiveColour)(aBuffers[aIndex].get(i)) });\r\n            y += (paddedHeight / b.shape[0]);\r\n        }\r\n\r\n    })\r\n\r\n    var links: Array<any> = []\r\n    var offset = 0;\r\n    var newOffset = 0;\r\n\r\n    ws.forEach((w, index) => {\r\n        offset = newOffset;\r\n        var buffer = w.bufferSync();\r\n        if (w.shape[1])\r\n            for (let source = 0; source < w.shape[1]; source++) {\r\n                for (let target = 0; target < w.shape[0]; target++) {\r\n                    if (buffer.get(target, source) < -connectionThreshold\r\n                        && aBuffers[index + 1].get(source) > activationThreshold)\r\n                        links.push({ color: negativeColour, source: source + offset, target: target + offset + w.shape[1] });\r\n                    if (buffer.get(target, source) > connectionThreshold\r\n                        && aBuffers[index + 1].get(source) > activationThreshold)\r\n                        links.push({ color: positiveColour, source: source + offset, target: target + offset + w.shape[1] });\r\n                }\r\n                newOffset++;\r\n            }\r\n    })\r\n\r\n\r\n    // graph payload (with minimalist structure)\r\n    const data = {\r\n        nodes: nodes,\r\n        links: links\r\n    };\r\n\r\n    // the graph configuration, you only need to pass down properties\r\n    // that you want to override, otherwise default ones will be used\r\n    var nodeLabelOffset = nodes.length - bs[bs.length - 1].shape[0];\r\n\r\n    const myConfig = {\r\n        //@ts-ignore\r\n        height,\r\n        width,\r\n        staticGraph: true,\r\n        automaticRearrangeAfterDropNode: false,\r\n        nodeHighlightBehavior: true,\r\n        node: {\r\n            color: 'lightgreen',\r\n            size: 120,\r\n            highlightStrokeColor: 'blue',\r\n            fontColor: 'white',\r\n            fontSize: 30,\r\n            labelProperty: (node: any) => {\r\n                if (node.id >= nodeLabelOffset)\r\n                    return ((node.id - nodeLabelOffset) === 10 ? \"NaN\": node.id - nodeLabelOffset).toString() + \"   \" +\r\n                        Math.floor(aBuffers[az.length - 1].get(node.id - nodeLabelOffset) * 100) + \"%\";\r\n                else\r\n                    return \"\"\r\n            }\r\n        },\r\n        link: {\r\n            highlightColor: 'lightblue'\r\n        }\r\n    };\r\n\r\n    //@ts-ignore\r\n    return <div ref={ref} style={{ position: 'relative', width: \"100%\", height: \"100%\" }}>\r\n        <Graph\r\n            staticGraph={true}\r\n            id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n            data={data}\r\n            config={myConfig}\r\n\r\n\r\n        />\r\n    </div>;\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport './App.css'\r\n\r\n//@ts-ignore\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport NeuralNetwork from './NeuralNet'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { Button } from '@material-ui/core';\r\nimport NetworkGraph from './NetworkGraph';\r\nimport useWindowSize from './useWindowSize';\r\nvar ai = require('./ai_64_32_1_junk.json')\r\n\r\nvar nn = new NeuralNetwork([28 * 28, 64, 32, 10])\r\nnn.fromObject(ai)\r\n\r\n\r\n\r\nfunction App() {\r\n  //const [saveableCanvas, setSaveableCanvas] = useState(undefined);\r\n  var saveableCanvasRef = useRef();\r\n  const [number, setNumber] = useState(\"Not a number\");\r\n  const [input, setInput] = useState(tf.zeros([28 * 28]));\r\n  let x = 0;\r\n  let y = 0;\r\n  let screenSize = useWindowSize();\r\n\r\n  let width = 28 * 20;\r\n  let height = 28 * 20;\r\n  var landscape = (screenSize && screenSize.width > screenSize.height * 1)\r\n\r\n\r\n  if (screenSize) {\r\n    var dimension = Math.min(landscape ? screenSize.width / 3 : (landscape? screenSize.width: screenSize.width-70), screenSize.height);\r\n    width = 28 * Math.floor((dimension) / 28);\r\n    height = 28 * Math.floor((dimension) / 28);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const predicatNumber = async () => {\r\n    if (saveableCanvasRef.current) {\r\n      setNumber(\"...\")\r\n      //@ts-ignore\r\n      var context = saveableCanvasRef.current.canvas.drawing.getContext('2d');\r\n      var imgd = context.getImageData(x, y, width, height);\r\n      var pix = imgd.data;\r\n\r\n      const skipW = Math.floor((imgd.width * 4) / (28));\r\n      const skipH = Math.floor((imgd.height * 4) / (28));\r\n      let data = []\r\n\r\n\r\n      for (let y = 0; y < imgd.height * 4; y += skipH) {\r\n        for (let x = 0; x < imgd.width * 4; x += skipW) {\r\n          data.push(pix[x + y * imgd.width + 3] / 255.0)\r\n        }\r\n      }\r\n\r\n\r\n      // var i =0;\r\n      // var s = \"\"\r\n      // for (let y = 0; y < 28; y++) {\r\n      //   for (let x = 0; x < 28; x++) {\r\n      //     if(data[i] < 0.5)\r\n      //       s += 0\r\n      //     else\r\n      //       s += 1\r\n\r\n      //     i++;          \r\n      //   }     \r\n      //   s += '\\n'\r\n\r\n      // }\r\n\r\n      var xs = tf.tensor(data, [28, 28]);\r\n\r\n      xs = xs.flatten();\r\n      setInput(xs);\r\n\r\n      var resBuffer = await nn.oneHotHighestValue(xs).buffer()\r\n      setNumber(resBuffer.get(0).toString())\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n\r\n\r\n    <div className=\"App\">\r\n\r\n      <header className=\"App-header\">\r\n        <div style={{ display: landscape ? 'inline' : 'block', width: \"100%\" }}>\r\n          <div style={{ margin: 20, display: 'inline-block', width, verticalAlign:\"top\"}} >\r\n          <div \r\n          // style={{       \r\n          //   display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', alignItems: 'center'}} \r\n          >\r\n            <h2 style={{width: width}} >{number === \"10\" ? \"Not a number\" : number}</h2>\r\n            <CanvasDraw\r\n              key={3245}\r\n              canvasWidth={width}\r\n              canvasHeight={height}\r\n              brushColor=\"#000000\"\r\n              brushRadius={20}\r\n              lazyRadius={0}\r\n              onChange={predicatNumber}\r\n\r\n              //@ts-ignore\r\n              ref={saveableCanvasRef}\r\n            />\r\n            <div style={{ margin: '20px', width }}>\r\n              <Button\r\n            \r\n                variant='contained'\r\n                onClick={() => {\r\n                  if (saveableCanvasRef.current) {\r\n                    //@ts-ignore\r\n                    saveableCanvasRef.current.clear();\r\n                    setInput(tf.zeros([28 * 28]));\r\n                    setNumber(\"Not a number\")\r\n                  }\r\n                }}\r\n              >Clear</Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={landscape ? { display: 'inline-block', flex: 1, height: '80vh', width: '50%' }\r\n          : { display: 'block', flex: 1, height: '80vh', width: '100%' }\r\n        }>\r\n          <NetworkGraph nn={nn} input={input} />\r\n        </div>\r\n        </div>\r\n      </header>\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {useEffect, useState} from 'react';\r\n\r\ninterface ScreenDimension{\r\n    width: number,\r\n    height: number\r\n}\r\n\r\nexport default function useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState<ScreenDimension | undefined>(undefined);\r\n  \r\n    useEffect(() => {\r\n      // Handler to call on window resize\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n      \r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      \r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n      \r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n  \r\n    return windowSize;\r\n  }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}