{"version":3,"sources":["NeuralNet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["stackSelfN","x","n","axis","stacks","i","push","tf","outterProduct","a","b","aStack","shape","bStack","NeuralNet","layerSizes","w","this","length","s","sigmoid","sub","input","clone","add","zs","az","z","output","learning_rate","getValues","dws","dbs","res","error","d_sigmoid","dw","reverse","mean","mul","results","getValue","oneHotHighestValue","equal","sum","div","Promise","all","map","Object","data","values","JSON","toData","stringify","name","fs","toJson","writeFileSync","console","log","json","readFileSync","toString","loadFromJson","fromObject","parse","ai","require","nn","NeuralNetwork","App","useState","undefined","saveableCanvas","setSaveableCanvas","number","setNumber","predicatNumber","context","canvas","drawing","getContext","imgd","getImageData","pix","skipW","Math","floor","width","skipH","height","y","xs","flatten","buffer","resBuffer","get","className","canvasWidth","canvasHeight","brushColor","brushRadius","lazyRadius","onChange","ref","canvasDraw","style","margin","Button","variant","onClick","clear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fb786f68.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\nimport { Tensor, sigmoid } from '@tensorflow/tfjs';\r\nimport fs from 'fs'\r\n\r\n\r\n\r\nfunction stackSelfN(x: Tensor, n: number, axis: number = 0) {\r\n    var stacks: Array<Tensor> = []\r\n    //@ts-ignore\r\n    for (var i = 0; i < n; i++) {\r\n        stacks.push(x);\r\n    }\r\n    return tf.stack(stacks, axis);\r\n}\r\n\r\nfunction outterProduct(a: Tensor, b: Tensor) {\r\n\r\n    var aStack = stackSelfN(a, b.shape[0]);\r\n\r\n    var bStack = stackSelfN(b, a.shape[0], 1);\r\n\r\n\r\n    return tf.mul(aStack, bStack);\r\n}\r\n\r\nexport default class NeuralNet {\r\n\r\n    w: Array<Tensor>;\r\n    b: Array<Tensor>;\r\n\r\n    constructor(layerSizes: Array<number>) {\r\n\r\n        this.w = []\r\n        this.b = []\r\n        for (var i = 0; i < layerSizes.length - 1; i++) {\r\n            this.w.push(tf.randomUniform([layerSizes[i + 1], layerSizes[i]], -1, 1))\r\n            this.b.push(tf.randomUniform([layerSizes[i + 1]], -1, 1))\r\n        }\r\n    }\r\n\r\n    d_sigmoid(x: Tensor) {\r\n        var s = sigmoid(x)\r\n        return tf.mul(s, tf.scalar(1).sub(s));\r\n    }\r\n\r\n    getValue(input: Tensor) {\r\n        input = input.clone()\r\n        var w = this.w\r\n        var b = this.b\r\n        for (var i = 0; i < w.length; i++) {\r\n            input = tf.dot(w[i], input)\r\n            input = tf.transpose(input)\r\n            input = input.add(b[i])\r\n            input = tf.transpose(input)\r\n            input = tf.sigmoid(input)\r\n        }\r\n\r\n        return input\r\n    }\r\n\r\n    getValues(input: Tensor) {\r\n        var w = this.w\r\n        var b = this.b\r\n        var zs = [input]\r\n        var az = [input]\r\n        for (var i = 0; i < w.length; i++) {\r\n            var z = tf.dot(w[i], az[i])\r\n            z = tf.transpose(z)\r\n            z = z.add(b[i])\r\n            z = tf.transpose(z)\r\n            var a = tf.sigmoid(z)\r\n\r\n            zs.push(z)\r\n            az.push(a)\r\n        }\r\n\r\n        return [az, zs]\r\n    }\r\n\r\n    backPropagate(input: Tensor, output: Tensor, learning_rate: number = 1) {\r\n        var w = this.w\r\n        var b = this.b\r\n        var [az, zs] = this.getValues(input)\r\n\r\n        var dws: Array<Tensor> = [];\r\n        var dbs: Array<Tensor> = [];\r\n\r\n        var res = az[az.length - 1];\r\n\r\n        var error = tf.mul(this.d_sigmoid(zs[zs.length - 1]), (tf.sub(res, output)))\r\n\r\n        dbs.push(error)\r\n\r\n        var a = az[az.length - 2]\r\n\r\n        var dw = outterProduct(a, error);\r\n\r\n\r\n\r\n        dws.push(dw)\r\n\r\n        for (let i = w.length - 2; i >= 0; i--) {\r\n            error = tf.mul(tf.dot(tf.transpose(w[i + 1]), error), this.d_sigmoid(zs[i + 1]))\r\n\r\n            dw = outterProduct(az[i], error);\r\n\r\n            dws.push(dw)\r\n            dbs.push(error)\r\n        }\r\n\r\n        dws = dws.reverse();\r\n        dbs = dbs.reverse();\r\n\r\n        if (dws[0].shape.length === 3) {\r\n            for (let i = 0; i < dws.length; i++) {\r\n                w[i] = w[i].sub(dws[i].mean(2).mul(tf.scalar(learning_rate)))\r\n            }\r\n\r\n            for (let i = 0; i < dbs.length; i++) {\r\n                b[i] = b[i].sub(dbs[i].mean(1).mul(tf.scalar(learning_rate)))\r\n            }\r\n\r\n        } else {\r\n\r\n            for (let i = 0; i < dws.length; i++) {\r\n                w[i] = w[i].sub(dws[i].mul(tf.scalar(learning_rate)))\r\n            }\r\n\r\n\r\n            for (let i = 0; i < dbs.length; i++) {\r\n                b[i] = b[i].sub(dbs[i].mul(tf.scalar(learning_rate))).mul(tf.scalar(learning_rate))\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    oneHotHighestValue(input: Tensor) {\r\n        var results = tf.transpose(this.getValue(input))\r\n        if(input.shape[1])\r\n            return tf.argMax(results, 1);\r\n        return tf.argMax(results, 0);\r\n    }\r\n\r\n    accuracyOneHotHighestValue(input: Tensor, output: Tensor) {\r\n        var results = this.oneHotHighestValue(input)\r\n        \r\n        var sames = output.equal(results).sum();\r\n        //\r\n        return sames.div(tf.scalar(output.shape[0]));\r\n    }\r\n\r\n    async toData() {\r\n        return {\r\n            w: await Promise.all(this.w.map(async w => ({ data: Object.values(await w.data()), shape: w.shape }))),\r\n            b: await Promise.all(this.b.map(async b => ({ data: Object.values(await b.data()), shape: b.shape }))),\r\n        }\r\n    }\r\n\r\n    async toJson() {\r\n        return JSON.stringify(await this.toData())\r\n    }\r\n\r\n    async saveToFileLocal(name: string = \"ai\") {\r\n        fs.writeFileSync(name+'.json', await this.toJson());\r\n    }\r\n\r\n    async loadFromFileLocal(name: string = \"ai\") {\r\n        console.log(\"loading\")\r\n        try{\r\n            var json = fs.readFileSync(name+'.json').toString();\r\n            await this.loadFromJson(json);\r\n        }catch(e){\r\n          \r\n        }\r\n        \r\n    }\r\n\r\n    loadFromJson(json: string) {\r\n        this.fromObject(JSON.parse(json))\r\n    }\r\n\r\n    fromObject({w,b}: any){\r\n        this.w = w.map((w: any) => tf.tensor(w.data, w.shape));\r\n        this.b = b.map((b: any) => tf.tensor(b.data, b.shape));\r\n    }\r\n\r\n}","import React, { useState } from 'react';\nimport './App.css';\n//@ts-ignore\nimport CanvasDraw from \"react-canvas-draw\";\nimport NeuralNetwork from './NeuralNet'\nimport * as tf from '@tensorflow/tfjs';\nimport {Button} from '@material-ui/core';\nvar ai = require('./ai_64_32_1_junk.json')\n\nvar nn = new NeuralNetwork([28*28, 64, 32, 10])\nnn.fromObject(ai) \n\nfunction App() {\n  const [saveableCanvas, setSaveableCanvas] = useState(undefined);\n  const [number, setNumber] = useState(\"\");\n  let x = 0;\n  let y = 0;\n  let width = 28*20;\n  let height = 28*20;\n\n\n\n\n  const predicatNumber = async () => {\n    if (saveableCanvas) {\n      setNumber(\"...\")\n      //@ts-ignore\n      var context = saveableCanvas.canvas.drawing.getContext('2d');\n      var imgd = context.getImageData(x, y, width, height);\n      var pix = imgd.data;\n\n      const skipW = Math.floor((imgd.width * 4) / (28));\n      const skipH = Math.floor((imgd.height * 4) / (28));\n      let data = []\n     \n      \n      for (let y = 0; y < imgd.height*4; y+=skipH) {\n        for (let x = 0; x < imgd.width*4; x+=skipW) {\n          data.push(pix[x + y*imgd.width + 3]/255.0)\n        }\n      }\n  \n\n      // var i =0;\n      // var s = \"\"\n      // for (let y = 0; y < 28; y++) {\n      //   for (let x = 0; x < 28; x++) {\n      //     if(data[i] < 0.5)\n      //       s += 0\n      //     else\n      //       s += 1\n\n      //     i++;          \n      //   }     \n      //   s += '\\n'\n            \n      // }\n\n      var xs = tf.tensor(data, [28, 28]);\n     \n      xs = xs.flatten();\n      \n      var resBuffer = await nn.oneHotHighestValue(xs).buffer()\n      setNumber(resBuffer.get(0).toString())\n\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h4>{number}</h4>\n        <CanvasDraw\n          canvasWidth={width}\n          canvasHeight={height}\n          brushColor= \"#000000\"\n          brushRadius={20}\n          lazyRadius={0}\n          onChange={predicatNumber}\n\n          //@ts-ignore\n          ref={(canvasDraw: any) => (setSaveableCanvas(canvasDraw))} />\n          <div style={{margin:'20px'}}>\n        <Button\n        \n        variant='contained'\n          onClick={() => {\n            if (saveableCanvas) {\n              //@ts-ignore\n              saveableCanvas.clear();\n            }\n          }}\n        >Clear</Button>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}